// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fstat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fstat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fstat_2eproto;
namespace monitor {
namespace proto {
class CpuStat;
class CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::monitor::proto::CpuStat* Arena::CreateMaybeMessage<::monitor::proto::CpuStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace monitor {
namespace proto {

// ===================================================================

class CpuStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monitor.proto.CpuStat) */ {
 public:
  CpuStat();
  virtual ~CpuStat();

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuStat* New() const final {
    return CreateMaybeMessage<CpuStat>(nullptr);
  }

  CpuStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuStat& from);
  void MergeFrom(const CpuStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monitor.proto.CpuStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpu_5fstat_2eproto);
    return ::descriptor_table_cpu_5fstat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuNameFieldNumber = 1,
    kCpuPrecentFieldNumber = 2,
    kUserPrecentFieldNumber = 3,
    kSystemPrecentFieldNumber = 5,
    kNicePrecentFieldNumber = 6,
    kIdlePrecentFieldNumber = 7,
    kIowaitPrecentFieldNumber = 8,
    kIrqPrecentFieldNumber = 9,
    kSoftirpPrecentFieldNumber = 10,
  };
  // string cpu_name = 1;
  void clear_cpu_name();
  const std::string& cpu_name() const;
  void set_cpu_name(const std::string& value);
  void set_cpu_name(std::string&& value);
  void set_cpu_name(const char* value);
  void set_cpu_name(const char* value, size_t size);
  std::string* mutable_cpu_name();
  std::string* release_cpu_name();
  void set_allocated_cpu_name(std::string* cpu_name);
  private:
  const std::string& _internal_cpu_name() const;
  void _internal_set_cpu_name(const std::string& value);
  std::string* _internal_mutable_cpu_name();
  public:

  // float cpu_precent = 2;
  void clear_cpu_precent();
  float cpu_precent() const;
  void set_cpu_precent(float value);
  private:
  float _internal_cpu_precent() const;
  void _internal_set_cpu_precent(float value);
  public:

  // float user_precent = 3;
  void clear_user_precent();
  float user_precent() const;
  void set_user_precent(float value);
  private:
  float _internal_user_precent() const;
  void _internal_set_user_precent(float value);
  public:

  // float system_precent = 5;
  void clear_system_precent();
  float system_precent() const;
  void set_system_precent(float value);
  private:
  float _internal_system_precent() const;
  void _internal_set_system_precent(float value);
  public:

  // float nice_precent = 6;
  void clear_nice_precent();
  float nice_precent() const;
  void set_nice_precent(float value);
  private:
  float _internal_nice_precent() const;
  void _internal_set_nice_precent(float value);
  public:

  // float idle_precent = 7;
  void clear_idle_precent();
  float idle_precent() const;
  void set_idle_precent(float value);
  private:
  float _internal_idle_precent() const;
  void _internal_set_idle_precent(float value);
  public:

  // float iowait_precent = 8;
  void clear_iowait_precent();
  float iowait_precent() const;
  void set_iowait_precent(float value);
  private:
  float _internal_iowait_precent() const;
  void _internal_set_iowait_precent(float value);
  public:

  // float irq_precent = 9;
  void clear_irq_precent();
  float irq_precent() const;
  void set_irq_precent(float value);
  private:
  float _internal_irq_precent() const;
  void _internal_set_irq_precent(float value);
  public:

  // float softirp_precent = 10;
  void clear_softirp_precent();
  float softirp_precent() const;
  void set_softirp_precent(float value);
  private:
  float _internal_softirp_precent() const;
  void _internal_set_softirp_precent(float value);
  public:

  // @@protoc_insertion_point(class_scope:monitor.proto.CpuStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_name_;
  float cpu_precent_;
  float user_precent_;
  float system_precent_;
  float nice_precent_;
  float idle_precent_;
  float iowait_precent_;
  float irq_precent_;
  float softirp_precent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpu_5fstat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuStat

// string cpu_name = 1;
inline void CpuStat::clear_cpu_name() {
  cpu_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CpuStat::cpu_name() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_name)
  return _internal_cpu_name();
}
inline void CpuStat::set_cpu_name(const std::string& value) {
  _internal_set_cpu_name(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_name)
}
inline std::string* CpuStat::mutable_cpu_name() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.CpuStat.cpu_name)
  return _internal_mutable_cpu_name();
}
inline const std::string& CpuStat::_internal_cpu_name() const {
  return cpu_name_.GetNoArena();
}
inline void CpuStat::_internal_set_cpu_name(const std::string& value) {
  
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CpuStat::set_cpu_name(std::string&& value) {
  
  cpu_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.CpuStat.cpu_name)
}
inline void CpuStat::set_cpu_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:monitor.proto.CpuStat.cpu_name)
}
inline void CpuStat::set_cpu_name(const char* value, size_t size) {
  
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.CpuStat.cpu_name)
}
inline std::string* CpuStat::_internal_mutable_cpu_name() {
  
  return cpu_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuStat::release_cpu_name() {
  // @@protoc_insertion_point(field_release:monitor.proto.CpuStat.cpu_name)
  
  return cpu_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuStat::set_allocated_cpu_name(std::string* cpu_name) {
  if (cpu_name != nullptr) {
    
  } else {
    
  }
  cpu_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_name);
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.CpuStat.cpu_name)
}

// float cpu_precent = 2;
inline void CpuStat::clear_cpu_precent() {
  cpu_precent_ = 0;
}
inline float CpuStat::_internal_cpu_precent() const {
  return cpu_precent_;
}
inline float CpuStat::cpu_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_precent)
  return _internal_cpu_precent();
}
inline void CpuStat::_internal_set_cpu_precent(float value) {
  
  cpu_precent_ = value;
}
inline void CpuStat::set_cpu_precent(float value) {
  _internal_set_cpu_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_precent)
}

// float user_precent = 3;
inline void CpuStat::clear_user_precent() {
  user_precent_ = 0;
}
inline float CpuStat::_internal_user_precent() const {
  return user_precent_;
}
inline float CpuStat::user_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.user_precent)
  return _internal_user_precent();
}
inline void CpuStat::_internal_set_user_precent(float value) {
  
  user_precent_ = value;
}
inline void CpuStat::set_user_precent(float value) {
  _internal_set_user_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.user_precent)
}

// float system_precent = 5;
inline void CpuStat::clear_system_precent() {
  system_precent_ = 0;
}
inline float CpuStat::_internal_system_precent() const {
  return system_precent_;
}
inline float CpuStat::system_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.system_precent)
  return _internal_system_precent();
}
inline void CpuStat::_internal_set_system_precent(float value) {
  
  system_precent_ = value;
}
inline void CpuStat::set_system_precent(float value) {
  _internal_set_system_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.system_precent)
}

// float nice_precent = 6;
inline void CpuStat::clear_nice_precent() {
  nice_precent_ = 0;
}
inline float CpuStat::_internal_nice_precent() const {
  return nice_precent_;
}
inline float CpuStat::nice_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.nice_precent)
  return _internal_nice_precent();
}
inline void CpuStat::_internal_set_nice_precent(float value) {
  
  nice_precent_ = value;
}
inline void CpuStat::set_nice_precent(float value) {
  _internal_set_nice_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.nice_precent)
}

// float idle_precent = 7;
inline void CpuStat::clear_idle_precent() {
  idle_precent_ = 0;
}
inline float CpuStat::_internal_idle_precent() const {
  return idle_precent_;
}
inline float CpuStat::idle_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.idle_precent)
  return _internal_idle_precent();
}
inline void CpuStat::_internal_set_idle_precent(float value) {
  
  idle_precent_ = value;
}
inline void CpuStat::set_idle_precent(float value) {
  _internal_set_idle_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.idle_precent)
}

// float iowait_precent = 8;
inline void CpuStat::clear_iowait_precent() {
  iowait_precent_ = 0;
}
inline float CpuStat::_internal_iowait_precent() const {
  return iowait_precent_;
}
inline float CpuStat::iowait_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.iowait_precent)
  return _internal_iowait_precent();
}
inline void CpuStat::_internal_set_iowait_precent(float value) {
  
  iowait_precent_ = value;
}
inline void CpuStat::set_iowait_precent(float value) {
  _internal_set_iowait_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.iowait_precent)
}

// float irq_precent = 9;
inline void CpuStat::clear_irq_precent() {
  irq_precent_ = 0;
}
inline float CpuStat::_internal_irq_precent() const {
  return irq_precent_;
}
inline float CpuStat::irq_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.irq_precent)
  return _internal_irq_precent();
}
inline void CpuStat::_internal_set_irq_precent(float value) {
  
  irq_precent_ = value;
}
inline void CpuStat::set_irq_precent(float value) {
  _internal_set_irq_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.irq_precent)
}

// float softirp_precent = 10;
inline void CpuStat::clear_softirp_precent() {
  softirp_precent_ = 0;
}
inline float CpuStat::_internal_softirp_precent() const {
  return softirp_precent_;
}
inline float CpuStat::softirp_precent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.softirp_precent)
  return _internal_softirp_precent();
}
inline void CpuStat::_internal_set_softirp_precent(float value) {
  
  softirp_precent_ = value;
}
inline void CpuStat::set_softirp_precent(float value) {
  _internal_set_softirp_precent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.softirp_precent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
