// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_load.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fload_2eproto;
namespace monitor {
namespace proto {
class CpuLoad;
class CpuLoadDefaultTypeInternal;
extern CpuLoadDefaultTypeInternal _CpuLoad_default_instance_;
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::monitor::proto::CpuLoad* Arena::CreateMaybeMessage<::monitor::proto::CpuLoad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace monitor {
namespace proto {

// ===================================================================

class CpuLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monitor.proto.CpuLoad) */ {
 public:
  CpuLoad();
  virtual ~CpuLoad();

  CpuLoad(const CpuLoad& from);
  CpuLoad(CpuLoad&& from) noexcept
    : CpuLoad() {
    *this = ::std::move(from);
  }

  inline CpuLoad& operator=(const CpuLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuLoad& operator=(CpuLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuLoad* internal_default_instance() {
    return reinterpret_cast<const CpuLoad*>(
               &_CpuLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuLoad& a, CpuLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuLoad* New() const final {
    return CreateMaybeMessage<CpuLoad>(nullptr);
  }

  CpuLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuLoad& from);
  void MergeFrom(const CpuLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monitor.proto.CpuLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpu_5fload_2eproto);
    return ::descriptor_table_cpu_5fload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLavg1FieldNumber = 1,
    kLavg3FieldNumber = 2,
    kLavg15FieldNumber = 3,
  };
  // float lavg_1 = 1;
  void clear_lavg_1();
  float lavg_1() const;
  void set_lavg_1(float value);
  private:
  float _internal_lavg_1() const;
  void _internal_set_lavg_1(float value);
  public:

  // float lavg_3 = 2;
  void clear_lavg_3();
  float lavg_3() const;
  void set_lavg_3(float value);
  private:
  float _internal_lavg_3() const;
  void _internal_set_lavg_3(float value);
  public:

  // float lavg_15 = 3;
  void clear_lavg_15();
  float lavg_15() const;
  void set_lavg_15(float value);
  private:
  float _internal_lavg_15() const;
  void _internal_set_lavg_15(float value);
  public:

  // @@protoc_insertion_point(class_scope:monitor.proto.CpuLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float lavg_1_;
  float lavg_3_;
  float lavg_15_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpu_5fload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuLoad

// float lavg_1 = 1;
inline void CpuLoad::clear_lavg_1() {
  lavg_1_ = 0;
}
inline float CpuLoad::_internal_lavg_1() const {
  return lavg_1_;
}
inline float CpuLoad::lavg_1() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuLoad.lavg_1)
  return _internal_lavg_1();
}
inline void CpuLoad::_internal_set_lavg_1(float value) {
  
  lavg_1_ = value;
}
inline void CpuLoad::set_lavg_1(float value) {
  _internal_set_lavg_1(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuLoad.lavg_1)
}

// float lavg_3 = 2;
inline void CpuLoad::clear_lavg_3() {
  lavg_3_ = 0;
}
inline float CpuLoad::_internal_lavg_3() const {
  return lavg_3_;
}
inline float CpuLoad::lavg_3() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuLoad.lavg_3)
  return _internal_lavg_3();
}
inline void CpuLoad::_internal_set_lavg_3(float value) {
  
  lavg_3_ = value;
}
inline void CpuLoad::set_lavg_3(float value) {
  _internal_set_lavg_3(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuLoad.lavg_3)
}

// float lavg_15 = 3;
inline void CpuLoad::clear_lavg_15() {
  lavg_15_ = 0;
}
inline float CpuLoad::_internal_lavg_15() const {
  return lavg_15_;
}
inline float CpuLoad::lavg_15() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuLoad.lavg_15)
  return _internal_lavg_15();
}
inline void CpuLoad::_internal_set_lavg_15(float value) {
  
  lavg_15_ = value;
}
inline void CpuLoad::set_lavg_15(float value) {
  _internal_set_lavg_15(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuLoad.lavg_15)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fload_2eproto
